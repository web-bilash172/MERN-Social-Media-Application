{"ast":null,"code":"import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { TabsContextProvider } from './Tabs.context.js';\nimport { TABS_ERRORS } from './Tabs.errors.js';\nfunction TabsProvider(_ref) {\n  let {\n    defaultValue,\n    value,\n    onTabChange,\n    orientation,\n    children,\n    loop,\n    id,\n    activateTabWithKeyboard,\n    allowTabDeactivation,\n    variant,\n    color,\n    radius,\n    inverted,\n    keepMounted = true\n  } = _ref;\n  const uid = useId(id);\n  const [_value, onChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange: onTabChange\n  });\n  return /* @__PURE__ */React.createElement(TabsContextProvider, {\n    value: {\n      value: _value,\n      orientation,\n      id: uid,\n      loop,\n      activateTabWithKeyboard,\n      getTabId: getSafeId(`${uid}-tab`, TABS_ERRORS.value),\n      getPanelId: getSafeId(`${uid}-panel`, TABS_ERRORS.value),\n      onTabChange: onChange,\n      allowTabDeactivation,\n      variant,\n      color,\n      radius,\n      inverted,\n      keepMounted\n    }\n  }, children);\n}\nTabsProvider.displayName = \"@mantine/core/TabsProvider\";\nexport { TabsProvider };","map":{"version":3,"mappings":";;;;;AAKO,SAASA,YAAY,OAezB;EAAA,IAf0B;IAC3BC,YAAY;IACZC,KAAK;IACLC,WAAW;IACXC,WAAW;IACXC,QAAQ;IACRC,IAAI;IACJC,EAAE;IACFC,uBAAuB;IACvBC,oBAAoB;IACpBC,OAAO;IACPC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,WAAW,GAAG;EAChB,CAAC;EACC,MAAMC,GAAG,GAAGC,KAAK,CAACT,EAAE,CAAC;EACrB,MAAM,CAACU,MAAM,EAAEC,QAAQ,CAAC,GAAGC,eAAe,CAAC;IACzCjB,KAAK;IACLD,YAAY;IACZmB,UAAU,EAAE,IAAI;IAChBF,QAAQ,EAAEf;EACd,CAAG,CAAC;EACF,sBAAuBkB,KAAK,CAACC,aAAa,CAACC,mBAAmB,EAAE;IAC9DrB,KAAK,EAAE;MACLA,KAAK,EAAEe,MAAM;MACbb,WAAW;MACXG,EAAE,EAAEQ,GAAG;MACPT,IAAI;MACJE,uBAAuB;MACvBgB,QAAQ,EAAEC,SAAS,CAAE,GAAEV,GAAI,MAAK,EAAEW,WAAW,CAACxB,KAAK,CAAC;MACpDyB,UAAU,EAAEF,SAAS,CAAE,GAAEV,GAAI,QAAO,EAAEW,WAAW,CAACxB,KAAK,CAAC;MACxDC,WAAW,EAAEe,QAAQ;MACrBT,oBAAoB;MACpBC,OAAO;MACPC,KAAK;MACLC,MAAM;MACNC,QAAQ;MACRC;IACN;EACA,CAAG,EAAET,QAAQ,CAAC;AACd;AACAL,YAAY,CAAC4B,WAAW,GAAG,4BAA4B","names":["TabsProvider","defaultValue","value","onTabChange","orientation","children","loop","id","activateTabWithKeyboard","allowTabDeactivation","variant","color","radius","inverted","keepMounted","uid","useId","_value","onChange","useUncontrolled","finalValue","React","createElement","TabsContextProvider","getTabId","getSafeId","TABS_ERRORS","getPanelId","displayName"],"sources":["C:\\projects\\Social Media Project\\frontend design\\node_modules\\@mantine\\core\\src\\Tabs\\TabsProvider.tsx"],"sourcesContent":["import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { MantineColor, MantineNumberSize } from '@mantine/styles';\nimport { TabsContextProvider } from './Tabs.context';\nimport { TABS_ERRORS } from './Tabs.errors';\nimport { TabsValue, TabsOrientation, TabsVariant } from './Tabs.types';\n\nexport interface TabsProviderProps {\n  /** Default value for uncontrolled component */\n  defaultValue?: TabsValue;\n\n  /** Value for controlled component */\n  value?: TabsValue;\n\n  /** Callback for controlled component */\n  onTabChange?(value: TabsValue): void;\n\n  /** Tabs orientation, vertical or horizontal */\n  orientation?: TabsOrientation;\n\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Determines whether tab should be activated with arrow key press, defaults to true */\n  activateTabWithKeyboard?: boolean;\n\n  /** Determines whether tab can be deactivated, defaults to false */\n  allowTabDeactivation?: boolean;\n\n  /** Tabs content */\n  children: React.ReactNode;\n\n  /** Controls component visuals */\n  variant?: TabsVariant;\n\n  /** Key of theme.colors */\n  color?: MantineColor;\n\n  /** Tabs border-radius from theme.radius or number ti set value from theme, defaults to theme.defaultRadius */\n  radius?: MantineNumberSize;\n\n  /** Determines whether tabs should have inverted styles */\n  inverted?: boolean;\n\n  /** If set to false, Tabs.Panel content will not stay mounted when tab is not active */\n  keepMounted?: boolean;\n}\n\nexport function TabsProvider({\n  defaultValue,\n  value,\n  onTabChange,\n  orientation,\n  children,\n  loop,\n  id,\n  activateTabWithKeyboard,\n  allowTabDeactivation,\n  variant,\n  color,\n  radius,\n  inverted,\n  keepMounted = true,\n}: TabsProviderProps) {\n  const uid = useId(id);\n\n  const [_value, onChange] = useUncontrolled<TabsValue>({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange: onTabChange,\n  });\n\n  return (\n    <TabsContextProvider\n      value={{\n        value: _value,\n        orientation,\n        id: uid,\n        loop,\n        activateTabWithKeyboard,\n        getTabId: getSafeId(`${uid}-tab`, TABS_ERRORS.value),\n        getPanelId: getSafeId(`${uid}-panel`, TABS_ERRORS.value),\n        onTabChange: onChange,\n        allowTabDeactivation,\n        variant,\n        color,\n        radius,\n        inverted,\n        keepMounted,\n      }}\n    >\n      {children}\n    </TabsContextProvider>\n  );\n}\n\nTabsProvider.displayName = '@mantine/core/TabsProvider';\n"]},"metadata":{},"sourceType":"module"}