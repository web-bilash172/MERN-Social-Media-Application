{"ast":null,"code":"import { useRef, useEffect } from 'react';\nfunction useTimeout(fn, delay) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    autoInvoke: false\n  };\n  const timeoutRef = useRef(null);\n  const start = () => {\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        fn();\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n  const clear = () => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n    return clear;\n  }, [delay]);\n  return {\n    start,\n    clear\n  };\n}\nexport { useTimeout };","map":{"version":3,"mappings":";AACO,SAASA,UAAU,CAACC,EAAE,EAAEC,KAAK,EAAmC;EAAA,IAAjCC,OAAO,uEAAG;IAAEC,UAAU,EAAE;EAAK,CAAE;EACnE,MAAMC,UAAU,GAAGC,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMC,KAAK,GAAG,MAAM;IAClB,IAAI,CAACF,UAAU,CAACG,OAAO,EAAE;MACvBH,UAAU,CAACG,OAAO,GAAGC,MAAM,CAACC,UAAU,CAAC,MAAM;QAC3CT,EAAE,EAAE;QACJI,UAAU,CAACG,OAAO,GAAG,IAAI;MACjC,CAAO,EAAEN,KAAK,CAAC;IACf;EACA,CAAG;EACD,MAAMS,KAAK,GAAG,MAAM;IAClB,IAAIN,UAAU,CAACG,OAAO,EAAE;MACtBC,MAAM,CAACG,YAAY,CAACP,UAAU,CAACG,OAAO,CAAC;MACvCH,UAAU,CAACG,OAAO,GAAG,IAAI;IAC/B;EACA,CAAG;EACDK,SAAS,CAAC,MAAM;IACd,IAAIV,OAAO,CAACC,UAAU,EAAE;MACtBG,KAAK,EAAE;IACb;IACI,OAAOI,KAAK;EAChB,CAAG,EAAE,CAACT,KAAK,CAAC,CAAC;EACX,OAAO;IAAEK,KAAK;IAAEI;EAAK,CAAE;AACzB","names":["useTimeout","fn","delay","options","autoInvoke","timeoutRef","useRef","start","current","window","setTimeout","clear","clearTimeout","useEffect"],"sources":["C:\\projects\\Social Media Project\\frontend design\\node_modules\\@mantine\\hooks\\src\\use-timeout\\use-timeout.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\nexport function useTimeout(\n  fn: () => void,\n  delay: number,\n  options: { autoInvoke: boolean } = { autoInvoke: false }\n) {\n  const timeoutRef = useRef<number>(null);\n\n  const start = () => {\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        fn();\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n\n  const clear = () => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n\n    return clear;\n  }, [delay]);\n\n  return { start, clear };\n}\n"]},"metadata":{},"sourceType":"module"}